import cv2
import numpy as np
import random
from ultralytics import YOLO


# opening the file in read mode with specified encoding
with open(r'D:\Data Science\VS CODE\Open ai\yoloenv\coco.txt', "r", encoding='utf-8') as my_file:
    data = my_file.read()

# split the text by newline
class_list = data.split("\n")

# Generate random colors for class list
detection_colors = []
for i in range(len(class_list)):
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    detection_colors.append((b, g, r))

# Load a hypothetical YOLOv11 model
# Assuming that YOLOv11 uses the same loading syntax as YOLOv8
model = YOLO("D:\Data Science\VS CODE\Open ai\yoloenv\yolo11n.pt", "11n")  # Replace with actual YOLOv11 model path

# Video capture parameters
frame_wid = 640
frame_hyt = 480

cap = cv2.VideoCapture(r"D:\Data Science\VS CODE\Open ai\yoloenv\vid.mp4")

if not cap.isOpened():
    print("Cannot open video")
    exit()

while True:
    ret, frame = cap.read()

    if not ret:
        print("Can't receive frame (stream end?). Exiting ...")
        break

    # Resize the frame for optimization
    frame = cv2.resize(frame, (frame_wid, frame_hyt))

    # Predict on the frame
    detect_params = model.predict(source=[frame], conf=0.45, save=True)

    DP = detect_params[0].numpy()

    if len(DP) != 0:
        for i in range(len(detect_params[0])):
            boxes = detect_params[0].boxes
            box = boxes[i]  # returns one box
            clsID = box.cls.numpy()[0]
            conf = box.conf.numpy()[0]
            bb = box.xyxy.numpy()[0]

            cv2.rectangle(
                frame,
                (int(bb[0]), int(bb[1])),
                (int(bb[2]), int(bb[3])),
                detection_colors[int(clsID)],
                3,
            )

            font = cv2.FONT_HERSHEY_COMPLEX
            cv2.putText(
                frame,
                class_list[int(clsID)] + " " + str(round(conf, 3)) + "%",
                (int(bb[0]), int(bb[1]) - 10),
                font,
                1,
                (255, 255, 255),
                2,
            )

    # Display the resulting frame
    cv2.imshow("Object Detection", frame)

    # Terminate run when "Q" pressed
    if cv2.waitKey(1) == ord("q"):
        break

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()
